{"version":3,"sources":["class/Bet.js","util/Calcul.js","components/progressBar/ProgressBar.js","components/betRow/BetRow.js","components/betTable/BetTable.js","components/input/Input.js","App.js","reportWebVitals.js","index.js"],"names":["Bet","title","this","bet1","bet2","quotation","gain","gainNet","probability","calculateNoBet","mise","q1","q2","reverse","output","trunc","calculateOneOrTwo","value","digit","isNaN","toFixed","ProgressBar","props","componentDidUpdate","prevProps","percentage","setState","state","className","style","width","toString","split","Component","BetRow","positiveGainNet","BetTable","betList","oneTwoNoBet","twoOneNoBet","oneOrTwo","colSpan","map","betRow","Input","handleChange","event","parseFloat","replace","float","target","id","quotationOne","quotationTwo","betValue","updateResult","updateBet","detail","prevState","input","htmlFor","type","onChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f5dabe2.chunk.js","sourcesContent":["export default class Bet {\n\tconstructor(title) {\n\t\tthis.title = title;\n\t\tthis.bet1 = 0;\n\t\tthis.bet2 = 0;\n\t\tthis.quotation = 0;\n\t\tthis.gain = 0;\n\t\tthis.gainNet = 0;\n\t\tthis.probability = 0;\n\t}\n}\n","/**\n * @param {Number} mise\n * @param {Number} q1\n * @param {Number} q2\n * @param {Boolean} reverse\n *\n * @return {Object}\n */\nexport const calculateNoBet = (mise, q1, q2, reverse = false) => {\n\tconst bet2 = mise / q2;\n\tconst bet1 = mise - bet2;\n\tconst quotation = (bet1 * q1) / mise;\n\tconst probability = 1 / quotation;\n\n\tlet output = {\n\t\tbet1: trunc(bet1),\n\t\tbet2: trunc(bet2),\n\t\tquotation: trunc(quotation),\n\t\tgain: trunc(mise * quotation),\n\t\tgainNet: trunc(mise * quotation - mise),\n\t\tprobability: trunc(probability < 1 ? probability : 1),\n\t};\n\n\tif (reverse) {\n\t\toutput.bet1 = trunc(bet2);\n\t\toutput.bet2 = trunc(bet1);\n\t}\n\n\treturn output;\n};\n\n/**\n *\n * @param {Number} mise\n * @param {Number} q1\n * @param {Number} q2\n *\n * @return {Object}\n */\nexport const calculateOneOrTwo = (mise, q1, q2) => {\n\tconst bet2 = (q1 * mise) / (q1 + q2);\n\tconst bet1 = mise - bet2;\n\tconst quotation = (q1 * q2) / (q1 + q2);\n\tconst probability = 1 / quotation;\n\n\treturn {\n\t\tbet1: trunc(bet1),\n\t\tbet2: trunc(bet2),\n\t\tquotation: trunc(quotation),\n\t\tgain: trunc(mise * quotation),\n\t\tgainNet: trunc(mise * quotation - mise),\n\t\tprobability: trunc(probability < 1 ? probability : 1),\n\t};\n};\n\n/**\n *\n * @param {Number} value\n * @param {integer} digit\n *\n * @return {Number}\n */\nexport const trunc = (value, digit = 2) =>\n\t!isNaN(value) ? value.toFixed(digit) : value;\n\n/**\n * @param {String} value\n *\n * @returns {Number}\n */\nexport const float = (value) => parseFloat(value.replace(',', '.'));\n","import React, { Component } from \"react\";\nimport \"./ProgressBar.css\";\n\nexport default class ProgressBar extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tpercentage: 0,\n\t\t};\n\t}\n\n\tcomponentDidUpdate = (prevProps) => {\n\t\tif (prevProps.percentage !== this.props.percentage) {\n\t\t\tthis.setState({ percentage: this.props.percentage });\n\t\t}\n\t};\n\n\trender() {\n\t\tconst percentage = this.state.percentage * 100;\n\t\treturn (\n\t\t\t<div className=\"meter\">\n\t\t\t\t<span\n\t\t\t\t\tclassName=\"progress-bar\"\n\t\t\t\t\tstyle={{ width: percentage + \"%\" }}\n\t\t\t\t></span>\n\t\t\t\t{percentage < 100 && (\n\t\t\t\t\t<span className=\"percentage\">\n\t\t\t\t\t\t{percentage.toString().split(\".\")[0] + \"%\"}\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\nimport ProgressBar from \"../progressBar/ProgressBar\";\n\nexport default class BetRow extends Component {\n\trender() {\n\t\tconst { title, quotation, bet1, bet2, probability, gain, gainNet } =\n\t\t\tthis.props;\n\n\t\tconst positiveGainNet = gainNet >= 0;\n\n\t\treturn (\n\t\t\t<tr>\n\t\t\t\t<td>{title}</td>\n\t\t\t\t<td>{quotation}</td>\n\t\t\t\t<td>{bet1} €</td>\n\t\t\t\t<td>{bet2} €</td>\n\t\t\t\t<td className=\"td-responsive\">\n\t\t\t\t\t<ProgressBar percentage={probability}></ProgressBar>\n\t\t\t\t</td>\n\t\t\t\t<td>{gain} €</td>\n\t\t\t\t<td className={positiveGainNet ? \"positive\" : \"negative\"}>\n\t\t\t\t\t{positiveGainNet ? \"+\" : \"\"}\n\t\t\t\t\t{gainNet} €\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\nimport BetRow from \"../betRow/BetRow\";\nimport \"./BetTable.css\";\n\nexport default class BetTable extends Component {\n\trender() {\n\t\tconst { oneTwoNoBet, twoOneNoBet, oneOrTwo } = this.props;\n\n\t\tconst betList = [oneTwoNoBet, twoOneNoBet, oneOrTwo];\n\n\t\treturn (\n\t\t\t<table className=\"horizontal-center\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th colSpan=\"1\">Pari</th>\n\t\t\t\t\t\t<th colSpan=\"1\">Cote</th>\n\t\t\t\t\t\t<th colSpan=\"1\">Mise 1</th>\n\t\t\t\t\t\t<th colSpan=\"1\">Mise 2</th>\n\t\t\t\t\t\t<th colSpan=\"1\" className=\"responsive-title\">\n\t\t\t\t\t\t\tProbabilité\n\t\t\t\t\t\t</th>\n\t\t\t\t\t\t<th colSpan=\"1\">Gain</th>\n\t\t\t\t\t\t<th colSpan=\"1\">Gain net</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{betList.map((betRow) => (\n\t\t\t\t\t\t<BetRow key={betRow.title} {...betRow}></BetRow>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\nimport Bet from \"../../class/Bet\";\nimport { calculateNoBet, calculateOneOrTwo, float } from \"../../util/Calcul\";\nimport BetTable from \"../betTable/BetTable\";\nimport \"./Input.css\";\n\nexport default class Input extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tbetValue: 0,\n\t\t\tquotationOne: 0,\n\t\t\tquotationTwo: 1,\n\t\t\toneTwoNoBet: new Bet(\"1 R 2\"),\n\t\t\ttwoOneNoBet: new Bet(\"2 R 1\"),\n\t\t\toneOrTwo: new Bet(\"1 ou 2\"),\n\t\t};\n\t}\n\n\thandleChange = (event) => {\n\t\tconst value = float(event.target.value);\n\n\t\tif (isNaN(value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst elementId = event.target.id;\n\n\t\tlet state = {};\n\n\t\tswitch (elementId) {\n\t\t\tcase \"quotation-1\":\n\t\t\t\tstate = { quotationOne: value };\n\t\t\t\tbreak;\n\t\t\tcase \"quotation-2\":\n\t\t\t\tstate = { quotationTwo: value };\n\t\t\t\tbreak;\n\t\t\tcase \"bet\":\n\t\t\t\tstate = { betValue: value };\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.setState(state);\n\t};\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst state = this.state;\n\n\t\tif (\n\t\t\tstate.quotationOne !== prevState.quotationOne ||\n\t\t\tstate.quotationTwo !== prevState.quotationTwo ||\n\t\t\tstate.betValue !== prevState.betValue\n\t\t) {\n\t\t\tthis.setState({\n\t\t\t\tbetValue: !isNaN(state.betValue) ? state.betValue : 1,\n\t\t\t\tquotationOne: !isNaN(state.quotationOne) ? state.quotationOne : 0,\n\t\t\t\tquotationTwo: !isNaN(state.quotationTwo) ? state.quotationTwo : 0,\n\t\t\t});\n\n\t\t\tthis.updateResult();\n\t\t}\n\t}\n\n\tupdateResult = () => {\n\t\tconst state = this.state;\n\n\t\tif (\n\t\t\tisNaN(state.quotationOne) ||\n\t\t\tisNaN(state.quotationTwo) ||\n\t\t\tisNaN(state.betValue)\n\t\t) {\n\t\t\t// A gérer\n\t\t\treturn this.setState(new Bet(\"toto\"));\n\t\t}\n\n\t\tconst mise = state.betValue;\n\t\tconst quotationOne = state.quotationOne;\n\t\tconst quotationTwo = state.quotationTwo;\n\n\t\tthis.setState({\n\t\t\toneTwoNoBet: this.updateBet(\n\t\t\t\tstate.oneTwoNoBet.title,\n\t\t\t\tcalculateNoBet(mise, quotationOne, quotationTwo)\n\t\t\t),\n\t\t\ttwoOneNoBet: this.updateBet(\n\t\t\t\tstate.twoOneNoBet.title,\n\t\t\t\tcalculateNoBet(mise, quotationTwo, quotationOne, true)\n\t\t\t),\n\t\t\toneOrTwo: this.updateBet(\n\t\t\t\tstate.oneOrTwo.title,\n\t\t\t\tcalculateOneOrTwo(mise, quotationOne, quotationTwo)\n\t\t\t),\n\t\t});\n\t};\n\n\t/**\n\t *\n\t * @param {String} title\n\t * @param {Object} detail\n\t */\n\tupdateBet = (title, detail) => ({ ...{ title: title }, ...detail });\n\n\trender() {\n\t\tconst state = this.state;\n\n\t\tconst inputList = [\n\t\t\t{\n\t\t\t\tid: \"bet\",\n\t\t\t\ttitle: \"Mise\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: \"quotation-1\",\n\t\t\t\ttitle: \"Cote 1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: \"quotation-2\",\n\t\t\t\ttitle: \"Cote 2\",\n\t\t\t},\n\t\t];\n\n\t\treturn (\n\t\t\t<div className=\"vertical-center\">\n\t\t\t\t<form>\n\t\t\t\t\t<div id=\"form-input\" className=\"horizontal-center\">\n\t\t\t\t\t\t{inputList.map((input) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div key={input.id}>\n\t\t\t\t\t\t\t\t\t<label htmlFor={input.id} className=\"input-label\">\n\t\t\t\t\t\t\t\t\t\t{input.title}\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\tid={input.id}\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"input-field\"\n\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t\t<BetTable {...state}></BetTable>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import \"./App.css\";\nimport Input from \"./components/input/Input\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\"></header>\n\t\t\t<Input></Input>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}